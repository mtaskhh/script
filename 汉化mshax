--=============================
-- Roblox 通用汉化脚本（mshax v4 汉化版·增强兼容）
-- 优化: 增强兼容性，解决汉化失效问题
-- 版本: v2.1 增强版
--=============================

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local LP = Players.LocalPlayer
local CoreGui = gethui and gethui() or game:GetService("CoreGui")

-- 兼容性检查
local function safeGetService(serviceName)
    local success, service = pcall(function()
        return game:GetService(serviceName)
    end)
    return success and service or nil
end

--=============================
-- 增强翻译表
--=============================
local TRANSLATIONS = {
    -- 脚本信息
    ["mshax v4"] = "mshax v4",
    ["No Footer"] = "雷电出品",
    ["Disable AFK"] = "防挂机检测",
    ["Unlock Padlock Distance"] = "自动挂锁距离",
    ["Automation Library Code"] = "图书馆自动解锁",
    ["Method 1"] = "模式 1",
    ["Method 2"] = "模式 2",
    ["Speed Bypass Method"] = "速度绕过模式",
    ["Ignore List"] = "互动列表",
    ["Bottom"] = "底部",
    ["Top"] = "顶部",
    ["Mouse"] = "鼠标",
    ["Center"] = "准心",
    ["Text Size"] = "字体大小",
    ["Arrows Size"] = "箭头大小",
    ["Fill Transparency"] = "填充透明度",
    ["Outline Transparency"] = "轮廓透明度",
    ["Text Transparency"] = "字体透明度",
    ["Text Outline Transparency"] = "字体轮廓透明度",
    ["Anti Seek-Obstructions"] = "防seek追逐战障碍",
    ["Death Farm"] = "自动刷死亡农场",
    ["Generator ESP"] = "发电机ESP",
    ["Ladder ESP"] = "梯子ESP",
    ["Fuse ESP"] = "保险丝ESP",
    ["Anchor ESP"] = "锚点ESP",
    ["Water Pump ESP"] = "水泵ESP",
    ["Notify Anchor Code"] = "通知锚点代码",
    ["Remove Figure (FE)"] = "删除Figure(FE)",
    ["Anti Bridge Fall"] = "防桥梁坠落",
    ["Show Seek Path"] = "Seek追足战路径提示",
    ["Anticheat Bypass"] = "反作弊绕过",
    ["Main"] = "主菜单",
    ["Player"] = "玩家",
    ["Exploits"] = "漏洞利用",
    ["Visuals"] = "视觉功能",
    ["Floor"] = "地板",
    ["Config"] = "配置",
    ["Addons"] = "附加组件",
    ["Miscellaneous"] = "杂项",
    ["Movement"] = "辅助",
    ["Camera"] = "视角",
    ["Fullbright"] = "全亮",
    ["No Camera Shake"] = "无视角抖动",
    ["Third Person"] = "第三人称",
    ["Spectate Entity"] = "观察实体",
    ["FOV Slider"] = "FOV值",
    ["FOV"] = "使用FOV值",
    ["Noclip"] = "穿墙",
    ["No Closet Exit Delay"] = "快速出柜子",
    ["Notifying / ESP"] = "通知/ESP",
    ["Reach"] = "范围",
    ["Instant Interacts"] = "即时交互",
    ["Prompt Reach"] = "显示范围",
    ["Prompt Clip"] = "提示穿透",
    ["Door Reach"] = "开门范围提升",
    ["Anti Lag"] = "防延迟",
    ["No Cutscenes"] = "无视过场动画",
    ["Reset"] = "重置",
    ["Play Again"] = "重新开始",
    ["Lobby"] = "返回大厅",
    ["Revive"] = "复活（非免费）",
    ["Inf Lockpick / SkeletonKey"] = "无限撬锁器/骷髅钥匙",
    ["Inf Shears"] = "无限剪刀",
    ["Infinite Items"] = "无限物品",
    ["Speed Boost Slider"] = "移速修改",
    ["Speed Boost"] = "启用速度",
    ["Fly Speed"] = "飞行速度",
    ["Fly"] = "飞行",
    ["Enable Jump"] = "启用跳跃",
    ["Infinite Jump"] = "无限连跳",
    ["No Acceleration"] = "无加速滑动",
    ["Entitys"] = "实体",
    ["Bypass"] = "绕过",
    ["Anti-Dread"] = "防Dread",
    ["Anti-Screech"] = "防Screech",
    ["Anti-A90"] = "防A90",
    ["Anti-Eyes"] = "防Eyes",
    ["Anti-Snare"] = "防地刺",
    ["Anti-Dupe"] = "防假门",
    ["Anti-Figure-Hearing"] = "防Figure听力检测",
    ["Anti-Halt"] = "防Halt",
    ["Automation"] = "自动化",
    ["Auto Interact"] = "自动互动",
    ["Auto Heartbeat Minigame"] = "自动心跳小游戏",
    ["Auto Breaker Box"] = "自动断路器",
    ["Auto Closet"] = "自动躲衣柜",
    ["Speed Bypass"] = "速度绕过",
    ["God Mode"] = "无敌模式",
    ["Anti Cheat Manipulation"] = "无拉回穿墙",
    ["Settings"] = "设置",
    ["Enable Tracers"] = "启用追踪线",
    ["Enable Arrows"] = "启用箭头",
    ["Enable Show Distances"] = "启用显示距离",
    ["Enable Rainbow"] = "启用彩虹效果",
    ["ESP Fade Time"] = "ESP特效持续时间",
    ["ESP Font"] = "ESP字体",
    ["Tracer Origin"] = "追踪线起点",
    ["Transport"] = "传送",
    ["Transparency Slider:"] = "透明度滑块:",
    ["Tracer Size"] = "追踪线大小",
    ["1/5"] = "1/5",
    ["Distance Size Ratio"] = "距离大小比例",
    ["Transparency Closet"] = "衣柜透明度",
    ["Transparency Cart"] = "推车透明度",
    ["Transparent"] = "透明",
    ["Entites Bypass"] = "防特殊绕过",
    ["Anti Nanner Banana"] = "防香蕉",
    ["ESP"] = "ESP",
    ["Timer Lever ESP"] = "计时器杠杆ESP",
    ["Entities"] = "实体列表",
    ["Entity Notifys"] = "实体通知",
    ["Entities ESP"] = "实体ESP",
    ["Notify Library Code"] = "通知图书馆密码",
    ["Modifiers"] = "修改器",
    ["Anti Lookman"] = "防Lookman",
    ["Anti Fog"] = "防Fog",
    ["Anti Giggle"] = "防Giggle",
    ["Anti Jamming"] = "防Jamming",
    ["Anti Gloom Egg"] = "防Gloom Egg",
    ["Anti Vacuum"] = "防虚空门",
    ["Themes"] = "主题",
    ["Background color"] = "背景颜色",
    ["Main color"] = "主颜色",
    ["Accent color"] = "副调色",
    ["Outline color"] = "轮廓颜色",
    ["Font color"] = "字体颜色",
    [".webm Video Background (Link)"] = ".webm视频背景(链接)",
    ["Theme list"] = "主题列表",
    ["Default"] = "默认",
    ["Set as default"] = "设为默认",
    ["Custom theme name"] = "自定义主题名称",
    ["Create theme"] = "创建主题",
    ["UI"] = "UI",
    ["Fps Unlocker"] = "FPS显示",
    ["Play Sound"] = "播放声音",
    ["Notify Side"] = "通知位置",
    ["Left"] = "左侧",
    ["Menu bind"] = "菜单绑定",
    ["Show Keybinds"] = "显示键位",
    ["Show Custom Cursor"] = "显示自定义光标",
    ["Unload GUI"] = "卸载GUI",
    ["Credits"] = "致谢",
    ["Load Config"] = "加载配置",
    ["Which I Use"] = "我所使用的",
    ["Configuration"] = "配置",
    ["BBot"] = "BBot",
    ["Facality"] = "Facality",
    ["Jester"] = "Jester",
    ["Mint"] = "Mint",
    ["Tokyo Night"] = "东京之夜",
    ["Ubuntu"] = "Ubuntu",
    ["Quartz"] = "Quartz",
    ["Config name"] = "配置名称",
    ["Create config"] = "创建配置",
    ["Config list"] = "配置列表",
    ["Load config"] = "加载配置",
    ["Overwrite config"] = "覆盖配置",
    ["Delete config"] = "删除配置",
    ["Refresh list"] = "刷新列表",
    ["Set as autoload"] = "设为自动加载",
    ["Reset autoload"] = "重置自动加载",
    ["Current autoload config: none"] = "当前自动加载配置: 无",
    ["Custom themes"] = "自定义主题",
    ["Load theme"] = "加载主题",
    ["Overwrite theme"] = "覆盖主题",
    ["Delete theme"] = "删除主题",
    ["Reset default"] = "重置默认",
    ["notzanocoddz - W Guy Made Auto Load Config"] = "脚本原作者KardinCat",
    ["KardinCat - Creator"] = "脚本由雷电汉化",
    ["bocaj11104 - Made The ESP Library Which  I Use"] = " ",
    ["Right"] = "右侧",
    ["Door"] = "门ESP",
    ["Key"] = "钥匙ESP",
    ["Closet ESP"] = "衣柜ESP",
    ["Gate Lever"] = "铁门杠杆ESP",
    ["Players ESP"] = "玩家ESP",
    ["Books"] = "图书馆-书ESP",
    ["Breaker"] = "断路器ESP",
    ["Items ESP"] = "物品ESP",
    ["Gold ESP"] = "金币ESP",
    ["Close"] = "关闭",
    ["Open"] = "打开",
    ["Enable"] = "启用",
    ["Disable"] = "禁用",
    ["Toggle"] = "切换",
    ["Select"] = "选择",
    ["Options"] = "选项",
    ["Advanced"] = "高级",
    ["Basic"] = "基础",
    ["Home"] = "主页",
    ["Back"] = "返回",
    ["Next"] = "下一步",
    ["Previous"] = "上一步",
    ["Save"] = "保存",
    ["Cancel"] = "取消",
    ["Apply"] = "应用",
    ["OK"] = "确定",
    ["Yes"] = "是",
    ["No"] = "否",
}

--=============================
-- 增强核心翻译逻辑
--=============================
local translatedObjects = {}
local isTranslating = false

-- 安全实例创建
local function safeInstance(class, parent)
    local success, obj = pcall(function()
        local instance = Instance.new(class)
        if parent then
            instance.Parent = parent
        end
        return instance
    end)
    return success and obj or nil
end

-- 增强翻译函数
local function translate(obj, force)
    if not obj or obj:IsA("Folder") or obj:IsA("Configuration") then 
        return 
    end
    
    -- 防止重复翻译
    if not force and translatedObjects[obj] then
        return
    end
    
    local success = pcall(function()
        if obj:IsA("TextLabel") or obj:IsA("TextButton") then
            local txt = tostring(obj.Text or "")
            if txt ~= "" and TRANSLATIONS[txt] then
                obj.Text = TRANSLATIONS[txt]
                translatedObjects[obj] = true
            end
        elseif obj:IsA("TextBox") then
            local txt = tostring(obj.Text or "")
            local ph = tostring(obj.PlaceholderText or "")
            
            if txt ~= "" and TRANSLATIONS[txt] then
                obj.Text = TRANSLATIONS[txt]
                translatedObjects[obj] = true
            end
            if ph ~= "" and TRANSLATIONS[ph] then
                obj.PlaceholderText = TRANSLATIONS[ph]
                translatedObjects[obj] = true
            end
        elseif obj:IsA("ImageLabel") or obj:IsA("ImageButton") then
            local nm = tostring(obj.Name or "")
            if nm ~= "" and TRANSLATIONS[nm] and not obj:FindFirstChild("CN_Label") then
                local lbl = safeInstance("TextLabel", obj)
                if lbl then
                    lbl.Name = "CN_Label"
                    lbl.BackgroundTransparency = 1
                    lbl.Size = UDim2.new(1,0,1,0)
                    lbl.Font = Enum.Font.SourceSans
                    lbl.TextSize = math.max(12, math.min(16, obj.AbsoluteSize.Y * 0.4))
                    lbl.TextColor3 = Color3.fromRGB(255,255,255)
                    lbl.TextStrokeTransparency = 0.3
                    lbl.TextStrokeColor3 = Color3.fromRGB(0,0,0)
                    lbl.Text = TRANSLATIONS[nm]
                    lbl.ZIndex = obj.ZIndex + 1
                    lbl.TextXAlignment = Enum.TextXAlignment.Center
                    lbl.TextYAlignment = Enum.TextYAlignment.Center
                    lbl.TextScaled = true
                    translatedObjects[obj] = true
                end
            end
        end
        
        -- 处理特殊属性
        if obj:IsA("GuiObject") then
            local tooltip = obj:GetAttribute("ToolTip") or obj:GetAttribute("Tooltip")
            if tooltip and type(tooltip) == "string" and TRANSLATIONS[tooltip] then
                obj:SetAttribute("ToolTip", TRANSLATIONS[tooltip])
                obj:SetAttribute("Tooltip", TRANSLATIONS[tooltip])
            end
        end
    end)
    
    if not success then
        -- 静默失败，避免错误干扰
    end
end

-- 批量翻译函数
local function translateAll(root, delay)
    if not root then return end
    
    delay = delay or 0
    
    local function doTranslate()
        isTranslating = true
        local descendants = {}
        
        -- 安全获取所有子对象
        local success = pcall(function()
            descendants = root:GetDescendants()
            table.insert(descendants, 1, root)
        end)
        
        if success then
            for i, obj in ipairs(descendants) do
                translate(obj)
                
                -- 每处理50个对象后yield一下，避免卡顿
                if i % 50 == 0 then
                    RunService.Heartbeat:Wait()
                end
            end
        end
        
        isTranslating = false
    end
    
    if delay > 0 then
        task.wait(delay)
    end
    
    doTranslate()
end

-- 增强连接函数
local connections = {}
local function attach(root)
    if not root then return end
    
    -- 清理旧连接
    if connections[root] then
        for _, conn in ipairs(connections[root]) do
            if conn and conn.Connected then
                conn:Disconnect()
            end
        end
    end
    connections[root] = {}
    
    -- DescendantAdded连接
    local conn1 = root.DescendantAdded:Connect(function(obj)
        if not isTranslating then
            task.wait(0.1) -- 短暂延迟确保对象完全加载
            translate(obj)
        end
    end)
    table.insert(connections[root], conn1)
    
    -- ChildAdded连接（额外保险）
    local conn2 = root.ChildAdded:Connect(function(child)
        if not isTranslating then
            task.wait(0.05)
            translateAll(child)
        end
    end)
    table.insert(connections[root], conn2)
end

--=============================
-- 动态监听与重试机制
--=============================
local retryQueue = {}
local function scheduleRetry(obj, attempts)
    attempts = attempts or 1
    if attempts > 5 then return end
    
    task.wait(0.5 * attempts) -- 递增延迟
    
    if obj and obj.Parent then
        translate(obj, true)
    else
        table.insert(retryQueue, {obj = obj, attempts = attempts + 1})
    end
end

-- 处理重试队列
spawn(function()
    while true do
        task.wait(1)
        
        local newQueue = {}
        for _, data in ipairs(retryQueue) do
            if data.obj and data.obj.Parent then
                translate(data.obj, true)
            elseif data.attempts < 5 then
                data.attempts = data.attempts + 1
                table.insert(newQueue, data)
            end
        end
        retryQueue = newQueue
    end
end)

--=============================
-- 实时监听新GUI创建
--=============================
local function monitorNewGuis()
    -- 监听PlayerGui
    if LP and LP:WaitForChild("PlayerGui", 5) then
        LP.PlayerGui.ChildAdded:Connect(function(gui)
            task.wait(0.2) -- 等待GUI完全加载
            translateAll(gui)
            attach(gui)
        end)
    end
    
    -- 监听CoreGui
    CoreGui.ChildAdded:Connect(function(gui)
        task.wait(0.2)
        translateAll(gui)
        attach(gui)
    end)
    
    -- 特殊处理：监听常见的GUI容器
    local containers = {
        "ScreenGui", "BillboardGui", "SurfaceGui", 
        "Frame", "ScrollingFrame", "CanvasGroup"
    }
    
    for _, container in ipairs(containers) do
        local function handleContainer(parent)
            for _, obj in ipairs(parent:GetChildren()) do
                if obj:IsA(container) then
                    translateAll(obj, 0.1)
                    attach(obj)
                end
            end
        end
        
        if LP and LP:FindFirstChild("PlayerGui") then
            handleContainer(LP.PlayerGui)
        end
        handleContainer(CoreGui)
    end
end

--=============================
-- 增强动态添加翻译接口
--=============================
local DEBUG = true -- 默认开启调试

local function log(msg, level)
    level = level or "INFO"
    if DEBUG then
        print("[mshax v4 翻译器][" .. level .. "] " .. msg)
    end
end

local function addTranslation(english, chinese)
    if type(english) == "string" and type(chinese) == "string" and english ~= "" then
        TRANSLATIONS[english] = chinese
        log("添加翻译: " .. english .. " -> " .. chinese)
        
        -- 立即应用到现有对象
        task.spawn(function()
            if LP and LP:FindFirstChild("PlayerGui") then
                translateAll(LP.PlayerGui, 0.1)
            end
            translateAll(CoreGui, 0.1)
        end)
        
        return true
    end
    log("添加翻译失败: 参数无效", "ERROR")
    return false
end

local function addTranslations(tbl)
    if type(tbl) ~= "table" then
        log("批量添加翻译失败: 参数必须是表格", "ERROR")
        return false
    end
    
    local count = 0
    for en, cn in pairs(tbl) do
        if addTranslation(en, cn) then
            count = count + 1
        end
    end
    
    log("批量添加翻译完成: 成功添加 " .. count .. " 项")
    return true
end

-- 全局接口
getgenv().AddTranslation = addTranslation
getgenv().AddTranslations = addTranslations

-- 调试接口
getgenv().SetTranslatorDebug = function(enabled)
    DEBUG = enabled
    log("调试模式" .. (enabled and "开启" or "关闭"))
end

getgenv().ForceRetranslate = function()
    log("强制重新翻译所有界面...")
    translatedObjects = {}
    if LP and LP:FindFirstChild("PlayerGui") then
        translateAll(LP.PlayerGui)
    end
    translateAll(CoreGui)
    log("强制重新翻译完成")
end

getgenv().GetTranslationStats = function()
    return {
        totalTranslations = #TRANSLATIONS,
        translatedObjects = #translatedObjects,
        isTranslating = isTranslating,
        retryQueueSize = #retryQueue
    }
end

--=============================
-- 增强初始化
--=============================
log("开始初始化汉化系统...")

-- 延迟初始化，确保所有服务加载完成
task.spawn(function()
    task.wait(1) -- 等待1秒确保游戏完全加载
    
    -- 初始化现有GUI
    if LP and LP:WaitForChild("PlayerGui", 10) then
        log("翻译PlayerGui...")
        translateAll(LP.PlayerGui)
        attach(LP.PlayerGui)
    else
        log("PlayerGui加载失败", "WARN")
    end
    
    log("翻译CoreGui...")
    translateAll(CoreGui)
    attach(CoreGui)
    
    -- 开始监听新GUI
    monitorNewGuis()
    
    log("汉化系统初始化完成")
end)

-- 定期强制检查（每30秒）
spawn(function()
    while true do
        task.wait(30)
        if not isTranslating then
            log("执行定期检查...")
            if LP and LP:FindFirstChild("PlayerGui") then
                translateAll(LP.PlayerGui)
            end
            translateAll(CoreGui)
        end
    end
end)

print("✅ mshax v4 汉化版 (增强版 v2.1) 已加载 - 雷电出品汉化")
print("🔧 调试命令: getgenv().SetTranslatorDebug(true/false)")
print("🔄 强制重译: getgenv().ForceRetranslate()")
print("📊 查看状态: getgenv().GetTranslationStats()")

-- 延迟加载原脚本，确保汉化系统先初始化
task.wait(2)
loadstring(game:HttpGet("https://raw.githubusercontent.com/TheHunterSolo1/Scripts/main/ProhaxV4"))()
